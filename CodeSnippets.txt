	//// We'll have a few threshholds, qualitatively determined
	//if (photocellReading < 10) {
	//	Serial.println(" - Dark");
	//} else if (photocellReading < 200) {
	//	Serial.println(" - Dim");
	//} else if (photocellReading < 500) {
	//	Serial.println(" - Light");
	//} else if (photocellReading < 800) {
	//	Serial.println(" - Bright");
	//} else {
	//	Serial.println(" - Very bright");
	//}


void BackPowerButtonPulseRateChange(){
	if ((automationCurrentState == stateMoveForward) || (automationCurrentState == stateMoveForwardSteerLeft) || (automationCurrentState == stateMoveForwardSteerRight)
		|| (automationCurrentState == stateMoveBackward) || (automationCurrentState == stateMoveBackwardSteerLeft) || (automationCurrentState == stateMoveBackwardSteerRight)
		|| (automationCurrentState == stateMoveRotateLeft) || (automationCurrentState == stateMoveRotateRight)){
			//check time spent moving to determin speed up
			if (automationCurrentStateTime > 3000){
				backPowerButtonPulseRate = 40; 
			}
			else if (automationCurrentStateTime > 6000){
				backPowerButtonPulseRate = 30; 
			}
			else if (automationCurrentStateTime > 10000){
				backPowerButtonPulseRate = 10; // exhausted
			}
	}
	else if (automationCurrentState = stateStationary) {
		//Check time spent resting to cool down
		if (automationCurrentStateTime > 2000){
			backPowerButtonPulseRate = 50; 
		}
		else if (automationCurrentStateTime > 5000){
			backPowerButtonPulseRate = 70; // normal pulse
		}
		else if (automationCurrentStateTime > 30000){
			backPowerButtonPulseRate = 90; // resting
		}
	}

	char str[7];
	//LCDdisplayManager.addMessage(dtostrf(mainCompass.directionalHeading, 5, 2, str));